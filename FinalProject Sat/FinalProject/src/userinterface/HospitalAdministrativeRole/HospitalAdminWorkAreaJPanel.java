/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HospitalAdministrativeRole;

import Business.Appointment.Appointment;
import Business.Drug.Drug;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.Organization.Type;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.VitalSigns.VitalSign;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author chand
 */
public class HospitalAdminWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalAdminWorkAreaJPanel
     */
    JPanel userprocessContainer;
    HospitalEnterprise enterprise;
     HashMap<String,Integer> hMap=new HashMap<String,Integer>();
        HashMap<String,Integer> dMap=new HashMap<String,Integer>();
       
    public HospitalAdminWorkAreaJPanel(JPanel userProcessContainer,Network network,Enterprise enterprise) {
        initComponents();
        this.userprocessContainer=userProcessContainer;
        this.enterprise=(HospitalEnterprise)enterprise;
        
        enterpriseTypeLabel.setText(enterprise.getEnterpriseType().getValue());
        enterpriseNameTxtField.setText(enterprise.getName());
    
        //manage organization combo box and table are generated
        populateTable();
        populateCombo();
        //manage employees - combo boxes are generated 
        populateOrganizationComboBox();
        populateOrganizationEmpComboBox();
        
        //manage useraccounts - combo box and table
        popOrganizationComboBox();
        popData();
        
        //manage patients table
        populatePatientsTable();
        
       
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        enterpriseTypeLabel = new javax.swing.JLabel();
        enterpriseNameTxtField = new javax.swing.JTextField();
        welcomeLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        manageUserAccounts = new javax.swing.JPanel();
        createUserJButton = new javax.swing.JButton();
        nameJTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        passwordJTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        employeeJComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        organizationJComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        roleJComboBox = new javax.swing.JComboBox();
        managePatientsJPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientsTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        addNewPatient = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        noOfPatientsTxtFld = new javax.swing.JTextField();
        manageOrganizationJPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        organizationJTable = new javax.swing.JTable();
        addOrganizationJButton = new javax.swing.JButton();
        organizationJComboBox1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        manageEmployeesPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        organizationJTable1 = new javax.swing.JTable();
        addEmployeeBtn = new javax.swing.JButton();
        organizationJComboBox2 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        nameJTextField1 = new javax.swing.JTextField();
        organizationEmpJComboBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        labAsstBtn = new javax.swing.JButton();
        schedulerAnalysisBtn = new javax.swing.JButton();
        aaptUnderDoctorBtn = new javax.swing.JButton();
        recoveredPatientBtn = new javax.swing.JButton();

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        enterpriseTypeLabel.setText("Enterprise Type:");

        enterpriseNameTxtField.setEnabled(false);

        welcomeLabel.setText("Welcome Admin!!!!!!!!!!!");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(enterpriseTypeLabel)
                .addGap(18, 18, 18)
                .addComponent(enterpriseNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(welcomeLabel)
                .addContainerGap(311, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseTypeLabel)
                    .addComponent(enterpriseNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(welcomeLabel))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jSplitPane1.setTopComponent(jPanel1);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 204));

        createUserJButton.setText("Create");
        createUserJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserJButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("User Name");

        userJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userJTable);

        jLabel3.setText("Password");

        jLabel4.setText("Employee");

        employeeJComboBox.setBackground(new java.awt.Color(255, 255, 204));
        employeeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeJComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Organization");

        organizationJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationJComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Role");

        javax.swing.GroupLayout manageUserAccountsLayout = new javax.swing.GroupLayout(manageUserAccounts);
        manageUserAccounts.setLayout(manageUserAccountsLayout);
        manageUserAccountsLayout.setHorizontalGroup(
            manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageUserAccountsLayout.createSequentialGroup()
                .addGroup(manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageUserAccountsLayout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addGroup(manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(104, 104, 104)
                        .addGroup(manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(employeeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(organizationJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roleJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageUserAccountsLayout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageUserAccountsLayout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(createUserJButton)))
                .addContainerGap(375, Short.MAX_VALUE))
        );
        manageUserAccountsLayout.setVerticalGroup(
            manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageUserAccountsLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(organizationJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roleJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageUserAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(createUserJButton)
                .addGap(27, 27, 27))
        );

        jTabbedPane1.addTab("Manage Employee UserAccounts", manageUserAccounts);

        patientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient First name", "Patient Last name", "Patient Email Id"
            }
        ));
        jScrollPane2.setViewportView(patientsTable);

        jButton1.setText("View Patient Details");

        jLabel11.setText("Click this button to add a new patient:");

        addNewPatient.setText("Add a new patient");
        addNewPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewPatientActionPerformed(evt);
            }
        });

        jLabel12.setText("Number of patients:");

        javax.swing.GroupLayout managePatientsJPanelLayout = new javax.swing.GroupLayout(managePatientsJPanel);
        managePatientsJPanel.setLayout(managePatientsJPanelLayout);
        managePatientsJPanelLayout.setHorizontalGroup(
            managePatientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePatientsJPanelLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addGroup(managePatientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managePatientsJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noOfPatientsTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(managePatientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(managePatientsJPanelLayout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addGap(26, 26, 26)
                            .addGroup(managePatientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addNewPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(399, Short.MAX_VALUE))
        );
        managePatientsJPanelLayout.setVerticalGroup(
            managePatientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePatientsJPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(managePatientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(noOfPatientsTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(25, 25, 25)
                .addGroup(managePatientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewPatient)
                    .addComponent(jLabel11))
                .addContainerGap(140, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage Patients", managePatientsJPanel);

        organizationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(organizationJTable);

        addOrganizationJButton.setText("Add Organization");
        addOrganizationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrganizationJButtonActionPerformed(evt);
            }
        });

        organizationJComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        organizationJComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationJComboBox1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Organization Type ");

        javax.swing.GroupLayout manageOrganizationJPanelLayout = new javax.swing.GroupLayout(manageOrganizationJPanel);
        manageOrganizationJPanel.setLayout(manageOrganizationJPanelLayout);
        manageOrganizationJPanelLayout.setHorizontalGroup(
            manageOrganizationJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageOrganizationJPanelLayout.createSequentialGroup()
                .addGroup(manageOrganizationJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageOrganizationJPanelLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(manageOrganizationJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(manageOrganizationJPanelLayout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(jLabel7)
                                .addGap(39, 39, 39)
                                .addComponent(organizationJComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(manageOrganizationJPanelLayout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(addOrganizationJButton)))
                .addContainerGap(375, Short.MAX_VALUE))
        );
        manageOrganizationJPanelLayout.setVerticalGroup(
            manageOrganizationJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageOrganizationJPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageOrganizationJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(organizationJComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(addOrganizationJButton)
                .addContainerGap(212, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage Organization", manageOrganizationJPanel);

        organizationJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(organizationJTable1);

        addEmployeeBtn.setText("Create Employee");
        addEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeBtnActionPerformed(evt);
            }
        });

        organizationJComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationJComboBox2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Organization");

        jLabel9.setText("Name");

        jLabel10.setText("Organization");

        javax.swing.GroupLayout manageEmployeesPanelLayout = new javax.swing.GroupLayout(manageEmployeesPanel);
        manageEmployeesPanel.setLayout(manageEmployeesPanelLayout);
        manageEmployeesPanelLayout.setHorizontalGroup(
            manageEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEmployeesPanelLayout.createSequentialGroup()
                .addGroup(manageEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageEmployeesPanelLayout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabel8)
                        .addGap(32, 32, 32)
                        .addComponent(organizationJComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageEmployeesPanelLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(manageEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageEmployeesPanelLayout.createSequentialGroup()
                                .addGap(0, 418, Short.MAX_VALUE)
                                .addComponent(addEmployeeBtn))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageEmployeesPanelLayout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addGroup(manageEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9))
                        .addGap(32, 32, 32)
                        .addGroup(manageEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(organizationEmpJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(308, Short.MAX_VALUE))
        );
        manageEmployeesPanelLayout.setVerticalGroup(
            manageEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEmployeesPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(manageEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(organizationJComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(manageEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(organizationEmpJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(manageEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(nameJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addEmployeeBtn)
                .addContainerGap(184, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage Employees", manageEmployeesPanel);

        labAsstBtn.setText("LabAsst");
        labAsstBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labAsstBtnActionPerformed(evt);
            }
        });

        schedulerAnalysisBtn.setText("Scheduler");
        schedulerAnalysisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedulerAnalysisBtnActionPerformed(evt);
            }
        });

        aaptUnderDoctorBtn.setText("Appointments under a doctor");
        aaptUnderDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aaptUnderDoctorBtnActionPerformed(evt);
            }
        });

        recoveredPatientBtn.setText("Patient who is recovering faster and due to which drug");
        recoveredPatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recoveredPatientBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(recoveredPatientBtn)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(aaptUnderDoctorBtn))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addComponent(labAsstBtn))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(schedulerAnalysisBtn)))
                .addContainerGap(315, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(labAsstBtn)
                .addGap(18, 18, 18)
                .addComponent(recoveredPatientBtn)
                .addGap(30, 30, 30)
                .addComponent(schedulerAnalysisBtn)
                .addGap(18, 18, 18)
                .addComponent(aaptUnderDoctorBtn)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Who is testing more patients", jPanel3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents
    //patients table
    public   HashMap<String,Integer> checkMap(String testString,int testInt,HashMap<String,Integer> testmap)
    {
        Set<Map.Entry<String, Integer>> grabset = testmap.entrySet();
      Iterator<Map.Entry<String,Integer>> i = grabset.iterator();
      int newValue=testInt;
      
      if(testmap.containsKey(testString))
      {
          
          int tst=testmap.get(testString);
          int existingValue=0;
          while (i.hasNext()){
          Map.Entry<String,Integer> me = (Map.Entry<String,Integer>)i.next();
          if(((String)me.getKey()).equalsIgnoreCase(testString))
          {
              existingValue=(Integer)me.getValue();
          }
          System.out.println ("Check:"+(String)me.getKey()+"  "+me.getValue());
            }
          newValue=newValue+existingValue;
          
          
          
          
          
      }
      else
      {
          //testmap.put(testString,newValue);
      }
      testmap.put(testString,newValue);
      return testmap;
    }
    public void populatePatientsTable(){
        DefaultTableModel model = (DefaultTableModel) patientsTable.getModel();
        PatientOrganization organization=(PatientOrganization)enterprise.getOrganizationDirectory().searchOrganization("Patient Organization");
        if(organization!=null)
        {
        model.setRowCount(0);
        int numberOfPatients=organization.getPatientDiretcory().getPatientList().size();
        noOfPatientsTxtFld.setText(String.valueOf(numberOfPatients));
        if(numberOfPatients>0)
        {
        for (Patient patient:organization.getPatientDiretcory().getPatientList()){
            Object[] row = new Object[4];
            row[0] = patient;
            row[1] = patient.getFirstName();
            row[2]=patient.getLastName();
            row[3]=patient.getEmailId();
            
            model.addRow(row);
        }
        }
        }
        
    }
    
    //manage organization -combo box
     private void populateCombo(){
        organizationJComboBox1.removeAllItems();
        for (Type type : Organization.Type.values()){
            if (!type.getValue().equals(Type.Admin.getValue())
                    &&!type.getValue().equals(Type.Distributor.getValue())&&!type.getValue().equals(Type.Sales.getValue()))
                organizationJComboBox1.addItem(type);
        }
    }
     //manage organization -table
    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel) organizationJTable.getModel();
        
        model.setRowCount(0);
        
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            Object[] row = new Object[2];
            row[0] = organization.getOrganizationID();
            row[1] = organization.getName();
            
            model.addRow(row);
        }
    }
    
    //manage employees-organization combo
    public void populateOrganizationComboBox(){
        organizationJComboBox2.removeAllItems();
        
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(!organization.getName().equals("Patient Organization")){
               
            organizationJComboBox2.addItem(organization);
        }}
    }
    //manage employees - organization employee combo
    public void populateOrganizationEmpComboBox(){
        organizationEmpJComboBox.removeAllItems();
        
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
           
               if(!organization.getName().equals("Patient Organization")){
                organizationEmpJComboBox.addItem(organization);
               }
            
        }
    }

    private void populateTable(Organization organization){
        DefaultTableModel model = (DefaultTableModel) organizationJTable1.getModel();
        
        model.setRowCount(0);
        
        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()){
            Object[] row = new Object[2];
            row[0] = employee.getId();
            row[1] = employee.getName();
            model.addRow(row);
        }
    }
    public ChartPanel pushChartPanel(HashMap<String,Integer> tMap,String heading){
//        int s1=Integer.parseInt(text1.getText());
//        int s2=Integer.parseInt(text2.getText());
//        int s3=Integer.parseInt(text3.getText());
//        int s4=Integer.parseInt(text4.getText());

       DefaultCategoryDataset dataset=new DefaultCategoryDataset();
//        dataset.setValue(50,"","Section1");
//        dataset.setValue(60,"","Section2");
//        dataset.setValue(70,"","Section3");
//        dataset.setValue(80,"","Section4");
        ArrayList<String> drugs=new ArrayList<String>();
        ArrayList<Integer> ints=new ArrayList<Integer>();

            Set<Map.Entry<String, Integer>> grabset = tMap.entrySet();
      Iterator<Map.Entry<String,Integer>> i = grabset.iterator();
       while (i.hasNext()){
          Map.Entry<String,Integer> me = (Map.Entry<String,Integer>)i.next();
//          dataset.setValue(me.getValue(), "",(String)me.getKey());
        drugs.add(me.getKey());
        ints.add(me.getValue());
         
       }
       for(int j=0;j<drugs.size();j++)
        {
            dataset.setValue(ints.get(j)," ",drugs.get(j)+""+j);
            
            
        }
         

        org.jfree.chart.JFreeChart chart=ChartFactory.createBarChart(heading, "","", dataset,PlotOrientation.HORIZONTAL,true,true,true);
        CategoryPlot catPlot=chart.getCategoryPlot();
        catPlot.setRangeGridlinePaint(Color.MAGENTA);

        ChartPanel chartPanel=new ChartPanel(chart);
//        panel.removeAll();
//        panel.add(chartPanel,BorderLayout.CENTER);
        return chartPanel;
    }
    
    //generate organization combo box - manage useraccounts
    
        public void popOrganizationComboBox() {
        organizationJComboBox.removeAllItems();

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            organizationJComboBox.addItem(organization);
        }
    }
    private void checkEffectivenessOfDrugs(){
        PatientOrganization pOrganization;
                
        for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        for(Drug everyDrug:enterprise.getDrugList())
                        {
                        if(organization.getName().equalsIgnoreCase(Organization.Type.Patient.getValue()))
                        {
                            pOrganization=(PatientOrganization)organization;
                            for(Patient patient:pOrganization.getPatientDiretcory().getPatientList())
                            {
                                int improvementCount=0;
                                int currentElement=0;
                                
                                for(VitalSign vitalSign:patient.getVitalSignHistory().getVitalSignList())
                                {
                                    if(currentElement>0){
                                    
                                    if(vitalSign.getTsh()<5.50&&vitalSign.getTsh()>0.35)
                                    {
                                        
                                        VitalSign vsBefore=patient.getVitalSignHistory().getVitalSignList().get(currentElement-1);
                                        Drug drug;
                                        Appointment app=patient.searchForAppointment(vsBefore.getReportId());
                                        drug=app.getPrescribedDrug();
                                        if(vsBefore.getTsh()>vitalSign.getTsh())
                                        {
                                        improvementCount++;
                                        
                                        System.out.println("drug now: "+drug.getName());
                                        hMap=checkMap(drug.getName(),1, hMap);
                                        System.out.println("I'm here");
                                        }
                                        if(drug.getName().equalsIgnoreCase(everyDrug.getName())&&drug.getSelectedDosage()==drug.getSelectedDosage())
                                        dMap=checkMap(drug.getName(), 1, dMap);
                                        
                                    }
                                    }
                                    currentElement++;
                                    
                                }
                                int threshold=(patient.getVitalSignHistory().getVitalSignList().size())/2;
                                if(improvementCount>threshold)
                                {
                                    
                                }
                            }
                            
                        }
                        }
                    }
        

        
    }
    
    public void populateEmployeeComboBox(Organization organization){
        employeeJComboBox.removeAllItems();
        
        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()){
            employeeJComboBox.addItem(employee);
        }
    }
    
    private void populateRoleComboBox(Organization organization){
        roleJComboBox.removeAllItems();
        for (Role role : organization.getSupportedRole()){
            roleJComboBox.addItem(role);
        }
    }
    // manage useraccounts - usertable generation
    public void popData() {

        DefaultTableModel model = (DefaultTableModel) userJTable.getModel();

        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                Object row[] = new Object[2];
                row[0] = ua;
                row[1] = ua.getRole();
                ((DefaultTableModel) userJTable.getModel()).addRow(row);
            }
        }
    }
//manage useraccounts-organizationcombobox
    private void organizationJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationJComboBoxActionPerformed
        Organization organization = (Organization) organizationJComboBox.getSelectedItem();
        if (organization != null){
            populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
        }
    }//GEN-LAST:event_organizationJComboBoxActionPerformed
    //manage create user-manageuseraccounts
    private void createUserJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserJButtonActionPerformed
boolean isValid = true;
        String userName = nameJTextField.getText();
        String password = passwordJTextField.getText();
        Organization organization = (Organization) organizationJComboBox.getSelectedItem();
        Employee employee = (Employee) employeeJComboBox.getSelectedItem();
        Role role = (Role) roleJComboBox.getSelectedItem();
        
        if (userName.isEmpty()) {
            int messageType = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(null, "User Name cannot be empty", "Error", messageType);
            nameJTextField.setBackground(Color.red);
            isValid = false;
        } else {
            nameJTextField.setBackground(Color.white);
        }

        String pswd = passwordJTextField.getText();
        String passwordRegEx = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$";
        if (pswd.isEmpty()) {
            int messageType = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(null, "Password cannot be empty", "Error", messageType);
            passwordJTextField.setBackground(Color.red);
            isValid = false;
        } else if (!pswd.isEmpty() && !pswd.matches(passwordRegEx)) {
            int messageType = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(null, "Password not valid (Rules for password start-of-string\n" + "a digit must occur at least once\n"
                    + "a lower case letter must occur at least once\n"
                    + "an upper case letter must occur at least once\n"
                    + "a special character must occur at least once\n"
                    + "no whitespace allowed in the entire string\n"
                    + "anything, at least eight places though\n"
                    + "end-of-string", "Error", messageType);
            passwordJTextField.setBackground(Color.red);
            isValid = false;
        } else {
            passwordJTextField.setBackground(Color.white);
        }
        
        if(isValid){
        organization.getUserAccountDirectory().createEmployeeUserAccount(userName, password, employee, role);

        popData();
        nameJTextField.setText("");
        passwordJTextField.setText("");
        
    }            
    }//GEN-LAST:event_createUserJButtonActionPerformed

    private void addOrganizationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrganizationJButtonActionPerformed

        Type type = (Type) organizationJComboBox1.getSelectedItem();
        enterprise.getOrganizationDirectory().createOrganization(type);
        populateTable();
        popOrganizationComboBox();
        //populating the combo boxes in manage employees
        populateOrganizationComboBox();
        populateOrganizationEmpComboBox();
        
    }//GEN-LAST:event_addOrganizationJButtonActionPerformed

    private void addEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeBtnActionPerformed

       boolean isValid = true;
        Organization organization = (Organization) organizationEmpJComboBox.getSelectedItem();
        String name = nameJTextField1.getText();
        
        if (name.isEmpty()) {
            int messageType = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(null, "Name cannot be empty", "Error", messageType);
            nameJTextField1.setBackground(Color.red);
            isValid = false;
        } else {
            nameJTextField1.setBackground(Color.white);
        }
        if(isValid){
        organization.getEmployeeDirectory().createEmployee(name);
        System.out.println("An employee named "+name+" created in"+organization.getName());
        nameJTextField1.setText("");
        }        

    }//GEN-LAST:event_addEmployeeBtnActionPerformed

    private void organizationJComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationJComboBox2ActionPerformed
        Organization organization = (Organization) organizationJComboBox2.getSelectedItem();
        if (organization != null){
            populateTable(organization);
        }
    }//GEN-LAST:event_organizationJComboBox2ActionPerformed

    private void addNewPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewPatientActionPerformed
        // TODO add your handling code here:
        //enterprise.getOrganizationDirectory().searchOrganization("Patient Organization").getPatientDirectory().;
        
        AddNewPatientJPanel addNewPatientPanel = new AddNewPatientJPanel(userprocessContainer,enterprise);
        userprocessContainer.add("addNewPatient",addNewPatientPanel);
        CardLayout layout = (CardLayout) userprocessContainer.getLayout();
        layout.next(userprocessContainer);
    }//GEN-LAST:event_addNewPatientActionPerformed

    private void organizationJComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationJComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_organizationJComboBox1ActionPerformed

    private void employeeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeJComboBoxActionPerformed

    private void labAsstBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labAsstBtnActionPerformed
        // TODO add your handling code here:
        HashMap<String,Integer> labMap=new HashMap<String,Integer>();
//        for(Appointment appointment:enterprise.getAppointmentDirectory().getAppointmentHistory())
//        {
        PatientOrganization patientorg;
        for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList())
        {
            if(org.getName().equalsIgnoreCase(Organization.Type.Patient.getValue()))
            {
                patientorg=(PatientOrganization)org;
                for(Patient patient:patientorg.getPatientDiretcory().getPatientList())
                {
                    for(VitalSign vs:patient.getVitalSignHistory().getVitalSignList())
                    {
                        labMap=checkMap(vs.getTestedBy().getName(),1,labMap);
                    }
                }
            
          
            }
        }
        ChartPanel chPAnel=pushChartPanel(hMap,"Lab assistant");
        DisplayPanel panel=new DisplayPanel(userprocessContainer,chPAnel);
        userprocessContainer.add("DrugAnalysisPanel",panel);

        CardLayout layout = (CardLayout) userprocessContainer.getLayout();
        layout.next(userprocessContainer);
       
        
        
       
    }//GEN-LAST:event_labAsstBtnActionPerformed

    private void schedulerAnalysisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedulerAnalysisBtnActionPerformed
        // TODO add your handling code here:
        
        HashMap<String,Integer> schMap=new HashMap<String,Integer>();
        for(Appointment appointment:enterprise.getAppointmentDirectory().getAppointmentHistory())
        {
            schMap=checkMap(appointment.getReportTestedBy().getName(),1,schMap);
        }
         ChartPanel chPAnel=pushChartPanel(schMap,"Scheduler");
        DisplayPanel panel=new DisplayPanel(userprocessContainer,chPAnel);
        userprocessContainer.add("DrugAnalysisPanel",panel);

        CardLayout layout = (CardLayout) userprocessContainer.getLayout();
        layout.next(userprocessContainer);
       
    }//GEN-LAST:event_schedulerAnalysisBtnActionPerformed

    private void aaptUnderDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aaptUnderDoctorBtnActionPerformed
        // TODO add your handling code here:
        
        HashMap<String,Integer> docMap=new HashMap<String,Integer>();
        for(Appointment appointment:enterprise.getAppointmentDirectory().getAppointmentHistory())
        {
            docMap=checkMap(appointment.getReportTestedBy().getName(),1,docMap);
        }
         ChartPanel chPAnel=pushChartPanel(docMap,"Doctor");
        DisplayPanel panel=new DisplayPanel(userprocessContainer,chPAnel);
        userprocessContainer.add("DrugAnalysisPanel",panel);

        CardLayout layout = (CardLayout) userprocessContainer.getLayout();
        layout.next(userprocessContainer);
       
    }//GEN-LAST:event_aaptUnderDoctorBtnActionPerformed

    private void recoveredPatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recoveredPatientBtnActionPerformed
        // TODO add your handling code here:
       checkEffectivenessOfDrugs();
       ChartPanel chPanel1=pushChartPanel(hMap,"Most Effective Drug");
       ChartPanel chPanel2=pushChartPanel(dMap,"Most prescribed Drug");
       drugAnalysisPanel panel=new drugAnalysisPanel(chPanel1, chPanel2, userprocessContainer);
       userprocessContainer.add("DrugAnalysisPanel",panel);

        CardLayout layout = (CardLayout) userprocessContainer.getLayout();
        layout.next(userprocessContainer);
        
    }//GEN-LAST:event_recoveredPatientBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aaptUnderDoctorBtn;
    private javax.swing.JButton addEmployeeBtn;
    private javax.swing.JButton addNewPatient;
    private javax.swing.JButton addOrganizationJButton;
    private javax.swing.JButton createUserJButton;
    private javax.swing.JComboBox employeeJComboBox;
    private javax.swing.JTextField enterpriseNameTxtField;
    private javax.swing.JLabel enterpriseTypeLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton labAsstBtn;
    private javax.swing.JPanel manageEmployeesPanel;
    private javax.swing.JPanel manageOrganizationJPanel;
    private javax.swing.JPanel managePatientsJPanel;
    private javax.swing.JPanel manageUserAccounts;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JTextField nameJTextField1;
    private javax.swing.JTextField noOfPatientsTxtFld;
    private javax.swing.JComboBox organizationEmpJComboBox;
    private javax.swing.JComboBox organizationJComboBox;
    private javax.swing.JComboBox organizationJComboBox1;
    private javax.swing.JComboBox organizationJComboBox2;
    private javax.swing.JTable organizationJTable;
    private javax.swing.JTable organizationJTable1;
    private javax.swing.JTextField passwordJTextField;
    private javax.swing.JTable patientsTable;
    private javax.swing.JButton recoveredPatientBtn;
    private javax.swing.JComboBox roleJComboBox;
    private javax.swing.JButton schedulerAnalysisBtn;
    private javax.swing.JTable userJTable;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
