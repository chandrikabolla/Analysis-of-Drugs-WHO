/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SchedulerRole;

import Business.Appointment.Appointment;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.SchedulerOrganization;
import Business.UserAccount.EmployeeUserAccount;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chand
 */
public class SchedulerWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form SchedulerWorkArea
     */
    JPanel userProcessContainer;
    SchedulerOrganization organization;
    UserAccount account;
    Enterprise enterprise;
    public SchedulerWorkArea(JPanel userProcessContainer,UserAccount account, SchedulerOrganization organization,Network network,Enterprise enterprise) {
        initComponents();
        roleLabel.setText(organization.getSupportedRole().get(0).toString());
        firstNameTxtFld.setText(organization.getEmployeeDirectory().searchEmployee(account.getUsername()).getName());
        
        this.userProcessContainer=userProcessContainer;
        this.organization=organization;
        this.account=account;
        this.enterprise=enterprise;
        populateTodaysAppointmentTable();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parentSplitPane = new javax.swing.JSplitPane();
        topPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        addInpatientsBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        todayAppointmentJTable = new javax.swing.JTable();
        roleLabel = new javax.swing.JLabel();
        firstNameTxtFld = new javax.swing.JTextField();
        welcomeLabel = new javax.swing.JLabel();
        enterpriseTypeLabel = new javax.swing.JLabel();
        enterpriseNameTxtField = new javax.swing.JTextField();
        bottomPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        RequestTestForPatientJPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inPatientTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        ViewAppointmentsByDatePanel = new javax.swing.JPanel();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        ViewAppointmentsByDate = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        AppointmentByDatJTable = new javax.swing.JTable();
        RequestTestForPatientJPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        DoctorAppointmentJTable = new javax.swing.JTable();
        scheduleDoctorAppointmentBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        workRequestJTable1 = new javax.swing.JTable();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();

        parentSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        addInpatientsBtn.setText("Add to InPatients");
        addInpatientsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInpatientsBtnActionPerformed(evt);
            }
        });

        todayAppointmentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Appointments Today"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(todayAppointmentJTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(addInpatientsBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addInpatientsBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        roleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        roleLabel.setText("Role:");

        firstNameTxtFld.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        firstNameTxtFld.setEnabled(false);

        welcomeLabel.setText("Welcome Admin!!!!!!!!!!!");

        enterpriseTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        enterpriseTypeLabel.setText("Enterprise Type:");

        enterpriseNameTxtField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        enterpriseNameTxtField.setEnabled(false);

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(enterpriseTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(roleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(enterpriseNameTxtField)
                            .addComponent(firstNameTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(welcomeLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roleLabel)
                            .addComponent(firstNameTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enterpriseTypeLabel)
                            .addComponent(enterpriseNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(welcomeLabel))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        parentSplitPane.setTopComponent(topPanel);

        inPatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(inPatientTable);

        requestTestJButton.setText("Request Test");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RequestTestForPatientJPanelLayout = new javax.swing.GroupLayout(RequestTestForPatientJPanel);
        RequestTestForPatientJPanel.setLayout(RequestTestForPatientJPanelLayout);
        RequestTestForPatientJPanelLayout.setHorizontalGroup(
            RequestTestForPatientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RequestTestForPatientJPanelLayout.createSequentialGroup()
                .addGap(0, 389, Short.MAX_VALUE)
                .addGroup(RequestTestForPatientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(requestTestJButton)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(297, 297, 297))
        );
        RequestTestForPatientJPanelLayout.setVerticalGroup(
            RequestTestForPatientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RequestTestForPatientJPanelLayout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(requestTestJButton)
                .addContainerGap(222, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Request Test for a Patient", RequestTestForPatientJPanel);

        ViewAppointmentsByDatePanel.setPreferredSize(new java.awt.Dimension(993, 300));

        ViewAppointmentsByDate.setText("View Appointments on this day");
        ViewAppointmentsByDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewAppointmentsByDateActionPerformed(evt);
            }
        });

        AppointmentByDatJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Appointment Id", "Patient Id"
            }
        ));
        jScrollPane3.setViewportView(AppointmentByDatJTable);

        javax.swing.GroupLayout ViewAppointmentsByDatePanelLayout = new javax.swing.GroupLayout(ViewAppointmentsByDatePanel);
        ViewAppointmentsByDatePanel.setLayout(ViewAppointmentsByDatePanelLayout);
        ViewAppointmentsByDatePanelLayout.setHorizontalGroup(
            ViewAppointmentsByDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewAppointmentsByDatePanelLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(ViewAppointmentsByDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ViewAppointmentsByDate, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                    .addComponent(jCalendar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(90, 90, 90)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
        );
        ViewAppointmentsByDatePanelLayout.setVerticalGroup(
            ViewAppointmentsByDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewAppointmentsByDatePanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(ViewAppointmentsByDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(ViewAppointmentsByDate)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View Appointments By date", ViewAppointmentsByDatePanel);

        DoctorAppointmentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Appointment Id", "Patient Id", "Test Results", "Doctor assigned"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(DoctorAppointmentJTable);

        scheduleDoctorAppointmentBtn.setText("Schedule Doctor Appointment");
        scheduleDoctorAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleDoctorAppointmentBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RequestTestForPatientJPanel1Layout = new javax.swing.GroupLayout(RequestTestForPatientJPanel1);
        RequestTestForPatientJPanel1.setLayout(RequestTestForPatientJPanel1Layout);
        RequestTestForPatientJPanel1Layout.setHorizontalGroup(
            RequestTestForPatientJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RequestTestForPatientJPanel1Layout.createSequentialGroup()
                .addGap(0, 292, Short.MAX_VALUE)
                .addGroup(RequestTestForPatientJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(RequestTestForPatientJPanel1Layout.createSequentialGroup()
                        .addComponent(scheduleDoctorAppointmentBtn)
                        .addGap(151, 151, 151)))
                .addGap(297, 297, 297))
        );
        RequestTestForPatientJPanel1Layout.setVerticalGroup(
            RequestTestForPatientJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RequestTestForPatientJPanel1Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(scheduleDoctorAppointmentBtn)
                .addContainerGap(192, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Make Doctor Appointment", RequestTestForPatientJPanel1);

        workRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(workRequestJTable1);

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1032, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(298, 298, 298)
                            .addComponent(refreshJButton))
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addComponent(assignJButton)
                            .addGap(193, 193, 193)
                            .addComponent(processJButton)))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 457, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(refreshJButton)
                    .addGap(7, 7, 7)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(46, 46, 46)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(assignJButton)
                        .addComponent(processJButton))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("View Appointment Requests", jPanel1);

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        parentSplitPane.setRightComponent(bottomPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parentSplitPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parentSplitPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable1.getModel();
        
        model.setRowCount(0);
        
        for(AppointmentWorkRequest request : organization.getAppointmentWorkQueue().getAppointmentWorkList()){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getUsername();
            row[2] = request.getDoctor();
            row[3] = request.getStatus();
            
            
            model.addRow(row);
        }
    }

    public void populateInPatientTable(){
        DefaultTableModel model = (DefaultTableModel) inPatientTable.getModel();
        
        model.setRowCount(0);
        Date newDate=new Date();
        for (Appointment appointment:getAppointmentsOfaDay(newDate))
        {
            Object[] row = new Object[2];
            row[0] = appointment;
          
            
            
            model.addRow(row);
        }
    }
    public void populateThisDayAppointments(Date date){
        DefaultTableModel model = (DefaultTableModel) AppointmentByDatJTable.getModel();
        
        model.setRowCount(0);
        
        for (Appointment appointment:getAppointmentsOfaDay(date))
        {
            Object[] row = new Object[2];
            row[0] = appointment;
            row[1]=appointment.getPatient();
            
            model.addRow(row);
        }
    }
    
    public void populateTodaysAppointmentTable(){
        DefaultTableModel model = (DefaultTableModel) todayAppointmentJTable.getModel();
        
        model.setRowCount(0);
        Date newDate=new Date();
        for (Appointment appointment:getAppointmentsOfaDay(newDate))
        {
            Object[] row = new Object[1];
            row[0] = appointment;
            
            
            model.addRow(row);
        }
        
    }
    
    //getting all appointments of today
    private ArrayList<Appointment> getAppointmentsOfaDay(Date date)
    {
            ArrayList<Appointment> appointmentList=new ArrayList<Appointment>();
            
            Date newDt=date;
            int numberOfAppnmtsToday=organization.getAppointmentDirectory().getAppointmentHistory().size();
            System.out.println("number of available appointments:"+numberOfAppnmtsToday);
            if(numberOfAppnmtsToday>0)
            {
                for(Appointment appointment:organization.getAppointmentDirectory().getAppointmentHistory())
                {
                       if(removeTime(appointment.getAppointmentDate()).equals(removeTime(date)))
                       {
                           System.out.println("Every appointment is checked");
                           appointmentList.add(appointment);
                       }
                }
                
            }
            System.out.println("Size of arraylist passed"+appointmentList.size());
            return appointmentList;
            

    }
    public Date removeTime(Date date) {    
    Calendar cal = Calendar.getInstance();  
    cal.setTime(date);  
    cal.set(Calendar.HOUR_OF_DAY, 0);  
    cal.set(Calendar.MINUTE, 0);  
    cal.set(Calendar.SECOND, 0);  
    cal.set(Calendar.MILLISECOND, 0);  
    return cal.getTime(); 
}

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

        int index=inPatientTable.getSelectedRow();
        Appointment appointment=(Appointment)inPatientTable.getValueAt(index,0);
        System.out.println("appointment id:"+appointment.getAppointmentId()+" for "+appointment.getPatient());
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("RequestLabTestJPanel", new RequestLabTestJPanel(userProcessContainer, account, enterprise,appointment));
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void scheduleDoctorAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleDoctorAppointmentBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scheduleDoctorAppointmentBtnActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable1.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        AppointmentWorkRequest request = (AppointmentWorkRequest)workRequestJTable1.getValueAt(selectedRow, 0);

        request.setStatus("Processing");

        ProcessAppointmentRequestPanel processWorkRequestJPanel = new ProcessAppointmentRequestPanel(userProcessContainer,enterprise, (EmployeeUserAccount)account,request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = inPatientTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        WorkRequest request = (WorkRequest)inPatientTable.getValueAt(selectedRow, 0);
        request.setReceiver(account);
        request.setStatus("Pending");
        populateTable();

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void addInpatientsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInpatientsBtnActionPerformed
        // TODO add your handling code here:
        int index=todayAppointmentJTable.getSelectedRow();
        Appointment app=(Appointment)todayAppointmentJTable.getValueAt(index,0);
        
        //adding to the inpatientTable
        DefaultTableModel model = (DefaultTableModel) inPatientTable.getModel();
        
        Object[] row = new Object[2];
            row[0] = app.getAppointmentId();
            row[1] = app.getPatient();
            
            
            model.addRow(row);
            populateInPatientTable();
        
        
    }//GEN-LAST:event_addInpatientsBtnActionPerformed

    private void ViewAppointmentsByDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewAppointmentsByDateActionPerformed
        // TODO add your handling code here:
        System.out.println(""+jCalendar1.getDate().toString());
        populateThisDayAppointments(jCalendar1.getDate());
        
    }//GEN-LAST:event_ViewAppointmentsByDateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AppointmentByDatJTable;
    private javax.swing.JTable DoctorAppointmentJTable;
    private javax.swing.JPanel RequestTestForPatientJPanel;
    private javax.swing.JPanel RequestTestForPatientJPanel1;
    private javax.swing.JButton ViewAppointmentsByDate;
    private javax.swing.JPanel ViewAppointmentsByDatePanel;
    private javax.swing.JButton addInpatientsBtn;
    private javax.swing.JButton assignJButton;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JTextField enterpriseNameTxtField;
    private javax.swing.JLabel enterpriseTypeLabel;
    private javax.swing.JTextField firstNameTxtFld;
    private javax.swing.JTable inPatientTable;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSplitPane parentSplitPane;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JLabel roleLabel;
    private javax.swing.JButton scheduleDoctorAppointmentBtn;
    private javax.swing.JTable todayAppointmentJTable;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel welcomeLabel;
    private javax.swing.JTable workRequestJTable1;
    // End of variables declaration//GEN-END:variables
}
